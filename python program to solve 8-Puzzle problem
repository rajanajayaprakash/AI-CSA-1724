import heapq

# Goal state of the puzzle
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

# Function to calculate the Manhattan distance heuristic
def calculate_heuristic(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                goal_row, goal_col = (state[i][j] - 1) // 3, (state[i][j] - 1) % 3
                distance += abs(i - goal_row) + abs(j - goal_col)
    return distance

# Function to get the possible moves
def get_possible_moves(state):
    moves = []
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                if i > 0:
                    moves.append((i - 1, j))
                if i < 2:
                    moves.append((i + 1, j))
                if j > 0:
                    moves.append((i, j - 1))
                if j < 2:
                    moves.append((i, j + 1))
    return moves

# Function to perform the A* search
def solve_puzzle(initial_state):
    frontier = [(calculate_heuristic(initial_state), 0, initial_state)]
    visited = set()
    
    while frontier:
        _, cost, current_state = heapq.heappop(frontier)
        
        if current_state == goal_state:
            return cost
        
        visited.add(str(current_state))
        zero_row, zero_col = next((i, j) for i in range(3) for j in range(3) if current_state[i][j] == 0)
        
        for move_row, move_col in get_possible_moves(current_state):
            new_state = [row.copy() for row in current_state]
            new_state[zero_row][zero_col], new_state[move_row][move_col] = new_state[move_row][move_col], 0
            if str(new_state) not in visited:
                heapq.heappush(frontier, (cost + 1 + calculate_heuristic(new_state), cost + 1, new_state))

# Example initial state
initial_state = [[1, 2, 3],
                 [4, 0, 5],
                 [7, 8, 6]]

# Solve the puzzle
steps = solve_puzzle(initial_state)
print("Number of steps to solve the puzzle:", steps)
