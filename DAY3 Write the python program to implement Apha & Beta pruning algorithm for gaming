def alpha_beta(node, depth, alpha, beta, maximizing_player):
    if depth == 0 or node.is_terminal():
        return node.evaluate(), None

    if maximizing_player:
        value = float('-inf')
        best_move = None
        for child in node.generate_children():
            child_value, _ = alpha_beta(child, depth - 1, alpha, beta, False)
            if child_value > value:
                value = child_value
                best_move = child
            alpha = max(alpha, value)
            if alpha >= beta:
                break
        return value, best_move
    else:
        value = float('inf')
        best_move = None
        for child in node.generate_children():
            child_value, _ = alpha_beta(child, depth - 1, alpha, beta, True)
            if child_value < value:
                value = child_value
                best_move = child
            beta = min(beta, value)
            if alpha >= beta:
                break
        return value, best_move

# Example usage
class Node:
    def __init__(self, value):
        self.value = value
        self.children = []

    def is_terminal(self):
        return not self.children

    def generate_children(self):
        return self.children

    def evaluate(self):
        return self.value

root = Node(0)
root.children = [Node(3), Node(12), Node(8)]

value, best_move = alpha_beta(root, 2, float('-inf'), float('inf'), True)
print("Best move:", best_move.value)
