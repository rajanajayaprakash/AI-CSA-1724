import heapq

class Node:
    def __init__(self, x, y, obstacle=False):
        self.x = x
        self.y = y
        self.obstacle = obstacle
        self.g = float('inf')
        self.h = float('inf')
        self.f = float('inf')
        self.parent = None

    def __lt__(self, other):
        return self.f < other.f

def heuristic(node, goal):
    return abs(node.x - goal.x) + abs(node.y - goal.y)

def astar(grid, start, goal):
    open_set = []
    closed_set = set()

    start.g = 0
    start.h = heuristic(start, goal)
    start.f = start.h
    heapq.heappush(open_set, start)

    while open_set:
        current = heapq.heappop(open_set)

        if current == goal:
            path = []
            while current:
                path.append((current.x, current.y))
                current = current.parent
            return path[::-1]

        closed_set.add(current)

        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            x, y = current.x + dx, current.y + dy
            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and not grid[x][y].obstacle:
                neighbor = grid[x][y]
                if neighbor in closed_set:
                    continue
                tentative_g = current.g + 1
                if tentative_g < neighbor.g:
                    neighbor.parent = current
                    neighbor.g = tentative_g
                    neighbor.h = heuristic(neighbor, goal)
                    neighbor.f = neighbor.g + neighbor.h
                    heapq.heappush(open_set, neighbor)

    return None

# Example usage
grid = [[Node(x, y) for y in range(5)] for x in range(5)]
grid[1][2].obstacle = True
grid[2][2].obstacle = True
start = grid[0][0]
goal = grid[4][4]
path = astar(grid, start, goal)

if path:
    print("Path found:", path)
else:
    print("No path found")
