from collections import deque

# Function to check if a state is valid
def is_valid_state(state):
    m_left, c_left, b_left, m_right, c_right, b_right = state

    # Check if there are more cannibals than missionaries on either side
    if (m_left > 0 and m_left < c_left) or (m_right > 0 and m_right < c_right):
        return False

    return True

# Function to generate all possible valid next states
def generate_next_states(state):
    m_left, c_left, b_left, m_right, c_right, b_right = state
    next_states = []

    # Boat moving from left to right
    if b_left == 1:
        for i in range(3):
            for j in range(3):
                if i + j <= 2 and i + j > 0:
                    next_state = (m_left - i, c_left - j, 0, m_right + i, c_right + j, 1)
                    if is_valid_state(next_state):
                        next_states.append(next_state)
    # Boat moving from right to left
    else:
        for i in range(3):
            for j in range(3):
                if i + j <= 2 and i + j > 0:
                    next_state = (m_left + i, c_left + j, 1, m_right - i, c_right - j, 0)
                    if is_valid_state(next_state):
                        next_states.append(next_state)

    return next_states

# Function to solve the problem using breadth-first search
def solve():
    initial_state = (3, 3, 1, 0, 0, 0)  # Initial state: (missionaries_left, cannibals_left, boat_left, missionaries_right, cannibals_right, boat_right)
    visited = set()
    queue = deque([(initial_state, [])])

    while queue:
        state, path = queue.popleft()

        if state[0] == 0 and state[1] == 0 and state[2] == 0:
            return path + [state]

        visited.add(state)

        next_states = generate_next_states(state)
        for next_state in next_states:
            if next_state not in visited:
                queue.append((next_state, path + [state]))

    return None

# Main function
def main():
    solution = solve()
    if solution:
        print("Solution found:")
        for i, state in enumerate(solution):
            print(f"Step {i+1}: {state}")
    else:
        print("No solution found.")

if __name__ == "__main__":
    main()
