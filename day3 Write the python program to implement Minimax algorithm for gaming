# Constants
X = 'X'
O = 'O'
EMPTY = ' '

# Function to print the board
def print_board(board):
    for row in board:
        print(' | '.join(row))
        print('-' * 5)

# Function to check if the game is over
def game_over(board):
    for row in board:
        if row.count(EMPTY) > 0:
            return False
    return True

# Function to evaluate the board
def evaluate(board):
    for row in board:
        if row.count(X) == 3:
            return 1
        elif row.count(O) == 3:
            return -1
    return 0

# Minimax function
def minimax(board, depth, is_maximizer):
    if game_over(board) or depth == 0:
        return evaluate(board)

    if is_maximizer:
        best_score = -float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = X
                    score = minimax(board, depth - 1, False)
                    board[i][j] = EMPTY
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = O
                    score = minimax(board, depth - 1, True)
                    board[i][j] = EMPTY
                    best_score = min(score, best_score)
        return best_score

# Function to find the best move
def find_best_move(board):
    best_move = None
    best_score = -float('inf')
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = X
                score = minimax(board, 5, False)
                board[i][j] = EMPTY
                if score > best_score:
                    best_score = score
                    best_move = (i, j)
    return best_move

# Initialize the board
board = [[EMPTY, EMPTY, EMPTY],
         [EMPTY, EMPTY, EMPTY],
         [EMPTY, EMPTY, EMPTY]]

# Main game loop
while not game_over(board):
    print_board(board)
    x, y = map(int, input("Enter your move (row col): ").split())
    if board[x][y] == EMPTY:
        board[x][y] = O
    else:
        print("Invalid move! Try again.")
        continue

    if game_over(board):
        break

    print("Computer's move:")
    best_move = find_best_move(board)
    board[best_move[0]][best_move[1]] = X

print_board(board)
print("Game over.")
