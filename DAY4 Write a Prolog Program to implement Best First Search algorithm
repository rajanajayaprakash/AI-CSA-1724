% graph edge relations
edge(a, b, 3).
edge(a, c, 5).
edge(b, d, 2).
edge(b, e, 4).
edge(c, f, 6).
edge(c, g, 7).

% heuristic values for each node
heuristic(a, 10).
heuristic(b, 7).
heuristic(c, 8).
heuristic(d, 5).
heuristic(e, 6).
heuristic(f, 3).
heuristic(g, 4).

% best_first_search(Start, Goal, Path)
best_first_search(Start, Goal, Path) :-
    best_first_search_helper([node(Start, 0)], Goal, [], Path).

% best_first_search_helper(Nodes, Goal, Visited, Path)
best_first_search_helper([node(Goal, Cost)|_], Goal, Path, [Goal|Path]).
best_first_search_helper([node(State, _)|Rest], Goal, Visited, Path) :-
    State \== Goal,
    findall(node(Next, TotalCost), (edge(State, Next, StepCost), \+ member(Next, Visited), heuristic(Next, Heuristic), TotalCost is Heuristic + StepCost), Children),
    append(Rest, Children, NewNodes),
    sort_nodes(NewNodes, SortedNodes),
    best_first_search_helper(SortedNodes, Goal, [State|Visited], Path).

% sort_nodes(Nodes, SortedNodes)
sort_nodes(Nodes, SortedNodes) :-
    predsort(compare_nodes, Nodes, SortedNodes).

% compare_nodes(Order, Node1, Node2)
compare_nodes(Order, node(_, Cost1), node(_, Cost2)) :-
    compare(Order, Cost1, Cost2).

% Example usage:
% ?- best_first_search(a, g, Path).
